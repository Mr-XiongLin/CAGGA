Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 304.1914062500 MiB 304.1914062500 MiB           1   @profile(precision=10,stream=open("census_SRP.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 305.4023437500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 305.4023437500 MiB   1.2109375000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 305.4023437500 MiB 305.4023437500 MiB           1   @profile(precision=10,stream=open("census_SRP.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 306.6250000000 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 306.6250000000 MiB   1.2226562500 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 306.6250000000 MiB 306.6250000000 MiB           1   @profile(precision=10,stream=open("census_SRP.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 306.6640625000 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 306.6640625000 MiB   0.0390625000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 306.6640625000 MiB 306.6640625000 MiB           1   @profile(precision=10,stream=open("census_SRP.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 306.6679687500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 306.6679687500 MiB   0.0039062500 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 306.6679687500 MiB 306.6679687500 MiB           1   @profile(precision=10,stream=open("census_SRP.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 306.6679687500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 306.6093750000 MiB  -0.0585937500 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 306.6093750000 MiB 306.6093750000 MiB           1   @profile(precision=10,stream=open("census_SRP.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 306.6093750000 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 306.6093750000 MiB   0.0000000000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 306.6093750000 MiB 306.6093750000 MiB           1   @profile(precision=10,stream=open("census_SRP.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 306.6093750000 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 306.6093750000 MiB   0.0000000000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 306.6093750000 MiB 306.6093750000 MiB           1   @profile(precision=10,stream=open("census_SRP.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 306.6093750000 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 306.6093750000 MiB   0.0000000000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 306.6093750000 MiB 306.6093750000 MiB           1   @profile(precision=10,stream=open("census_SRP.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 306.6093750000 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 306.5820312500 MiB  -0.0273437500 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 306.5820312500 MiB 306.5820312500 MiB           1   @profile(precision=10,stream=open("census_SRP.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 306.5820312500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 306.5820312500 MiB   0.0000000000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


