Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 304.4570312500 MiB 304.4570312500 MiB           1   @profile(precision=10,stream=open("census_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 305.4101562500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 305.4101562500 MiB   0.9531250000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 305.4101562500 MiB 305.4101562500 MiB           1   @profile(precision=10,stream=open("census_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 305.9492187500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 305.9492187500 MiB   0.5390625000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 305.9492187500 MiB 305.9492187500 MiB           1   @profile(precision=10,stream=open("census_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 306.4257812500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 306.4257812500 MiB   0.4765625000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 306.4257812500 MiB 306.4257812500 MiB           1   @profile(precision=10,stream=open("census_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 306.9570312500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 306.9570312500 MiB   0.5312500000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 307.0195312500 MiB 307.0195312500 MiB           1   @profile(precision=10,stream=open("census_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 307.4570312500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 307.4570312500 MiB   0.4375000000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 307.4570312500 MiB 307.4570312500 MiB           1   @profile(precision=10,stream=open("census_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 308.1445312500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 308.1445312500 MiB   0.6875000000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 308.1445312500 MiB 308.1445312500 MiB           1   @profile(precision=10,stream=open("census_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 308.6171875000 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 308.6171875000 MiB   0.4726562500 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 308.6171875000 MiB 308.6171875000 MiB           1   @profile(precision=10,stream=open("census_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 308.9921875000 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 308.9921875000 MiB   0.3750000000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 308.9921875000 MiB 308.9921875000 MiB           1   @profile(precision=10,stream=open("census_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 309.4921875000 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 309.4921875000 MiB   0.5000000000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 309.4921875000 MiB 309.4921875000 MiB           1   @profile(precision=10,stream=open("census_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 309.9023437500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 309.9023437500 MiB   0.4101562500 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


