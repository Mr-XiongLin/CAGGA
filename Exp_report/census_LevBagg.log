Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 304.6718750000 MiB 304.6718750000 MiB           1   @profile(precision=10,stream=open("census_LevBagg.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 311.5664062500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 311.5664062500 MiB   6.8945312500 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 311.5664062500 MiB 311.5664062500 MiB           1   @profile(precision=10,stream=open("census_LevBagg.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 311.6875000000 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 311.6875000000 MiB   0.1210937500 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 311.6875000000 MiB 311.6875000000 MiB           1   @profile(precision=10,stream=open("census_LevBagg.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 311.7500000000 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 311.7500000000 MiB   0.0625000000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 311.7500000000 MiB 311.7500000000 MiB           1   @profile(precision=10,stream=open("census_LevBagg.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 311.7500000000 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 311.7500000000 MiB   0.0000000000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 311.7500000000 MiB 311.7500000000 MiB           1   @profile(precision=10,stream=open("census_LevBagg.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 311.7500000000 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 311.7226562500 MiB  -0.0273437500 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 311.7226562500 MiB 311.7226562500 MiB           1   @profile(precision=10,stream=open("census_LevBagg.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 311.7226562500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 311.7226562500 MiB   0.0000000000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 311.7226562500 MiB 311.7226562500 MiB           1   @profile(precision=10,stream=open("census_LevBagg.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 311.7226562500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 311.7226562500 MiB   0.0000000000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 311.7226562500 MiB 311.7226562500 MiB           1   @profile(precision=10,stream=open("census_LevBagg.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 311.7226562500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 311.7226562500 MiB   0.0000000000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 311.7226562500 MiB 311.7226562500 MiB           1   @profile(precision=10,stream=open("census_LevBagg.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 311.7226562500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 311.4023437500 MiB  -0.3203125000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 311.4023437500 MiB 311.4023437500 MiB           1   @profile(precision=10,stream=open("census_LevBagg.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 311.4023437500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 311.4023437500 MiB   0.0000000000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


