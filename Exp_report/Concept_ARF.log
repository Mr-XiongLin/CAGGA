Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 172.9335937500 MiB 172.9335937500 MiB           1   @profile(precision=10,stream=open("Concept_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 173.7890625000 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 173.7890625000 MiB   0.8554687500 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 173.7890625000 MiB 173.7890625000 MiB           1   @profile(precision=10,stream=open("Concept_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 174.3007812500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 174.3007812500 MiB   0.5117187500 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 174.3085937500 MiB 174.3085937500 MiB           1   @profile(precision=10,stream=open("Concept_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 174.7109375000 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 174.7109375000 MiB   0.4023437500 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 174.7500000000 MiB 174.7500000000 MiB           1   @profile(precision=10,stream=open("Concept_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 175.0898437500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 175.0898437500 MiB   0.3398437500 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 175.0976562500 MiB 175.0976562500 MiB           1   @profile(precision=10,stream=open("Concept_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 175.2304687500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 175.2304687500 MiB   0.1328125000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 175.2304687500 MiB 175.2304687500 MiB           1   @profile(precision=10,stream=open("Concept_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 175.3554687500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 175.3554687500 MiB   0.1250000000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 175.3750000000 MiB 175.3750000000 MiB           1   @profile(precision=10,stream=open("Concept_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 175.6210937500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 175.6210937500 MiB   0.2460937500 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 175.6210937500 MiB 175.6210937500 MiB           1   @profile(precision=10,stream=open("Concept_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 175.9101562500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 175.9101562500 MiB   0.2890625000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 175.9296875000 MiB 175.9296875000 MiB           1   @profile(precision=10,stream=open("Concept_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 175.9335937500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 175.9335937500 MiB   0.0039062500 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


Filename: meta.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   133 175.9335937500 MiB 175.9335937500 MiB           1   @profile(precision=10,stream=open("Concept_ARF.log", "w+"))
   134                                         def test_train(ep,Mclf,X,y):
   135 175.9335937500 MiB   0.0000000000 MiB           2       for clf,clf_label in Mclf:
   136 175.9335937500 MiB   0.0000000000 MiB           1           Comp_start = time.time();y_pred = clf.predict(X);clf_a = accuracy_score(y, y_pred);clf.partial_fit(X, y,[1,0]);Time.append(time.time() - Comp_start);Acc.append(clf_a)


